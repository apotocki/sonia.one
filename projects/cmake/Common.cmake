if (DEFINED ENV{UNIQUE_BUILDINFO})
	add_definitions(-DSONIA_ONE_UNIQUE_BUILDINFO=$ENV{UNIQUE_BUILDINFO})
endif (DEFINED ENV{UNIQUE_BUILDINFO})

if (DEFINED ENV{ICU_INCLUDE})
	include_directories($ENV{ICU_HOME})
else (DEFINED ENV{ICU_INCLUDE})
	if (DEFINED ENV{ICU_HOME})
		include_directories($ENV{ICU_HOME}/include)
    else (DEFINED ENV{ICU_HOME})
        include_directories(${TPLS}/icu/include)
	endif (DEFINED ENV{ICU_HOME})
endif (DEFINED ENV{ICU_INCLUDE})	

if (DEFINED ENV{ICU_LIB})
	link_directories($ENV{ICU_LIB})
else (DEFINED ENV{ICU_LIB})
	if (DEFINED ENV{ICU_HOME})
		link_directories($ENV{ICU_HOME}/lib)
    else (DEFINED ENV{ICU_HOME})
        if (WIN32)
            link_directories(${TPLS}/icu/lib.mingw64)
        endif (WIN32)
	endif (DEFINED ENV{ICU_HOME})
endif (DEFINED ENV{ICU_LIB})

if (DEFINED ENV{ZLIB_INCLUDE})
	include_directories($ENV{ZLIB_INCLUDE})
else (DEFINED ENV{ZLIB_INCLUDE})
	if (DEFINED ENV{ZLIB_HOME})
		include_directories($ENV{ZLIB_HOME}/include)
    else (DEFINED ENV{ZLIB_HOME})
        include_directories(${TPLS}/icu/include)
	endif (DEFINED ENV{ZLIB_HOME})
endif (DEFINED ENV{ZLIB_INCLUDE})

if (DEFINED ENV{ZLIB_LIB})
	link_directories($ENV{ZLIB_LIB})
else (DEFINED ENV{ZLIB_LIB})
	if (DEFINED ENV{ZLIB_HOME})
		link_directories($ENV{ZLIB_HOME}/lib)
    else (DEFINED ENV{ZLIB_HOME})
        if (WIN32)
            link_directories(${TPLS}/zlib/lib.mingw64)
        endif (WIN32)
	endif (DEFINED ENV{ZLIB_HOME})
endif (DEFINED ENV{ZLIB_LIB})

if (DEFINED ENV{OPENSSL_INCLUDE})
	include_directories($ENV{OPENSSL_INCLUDE})
else (DEFINED ENV{OPENSSL_INCLUDE})
	if (DEFINED ENV{OPENSSL_HOME})
		include_directories($ENV{OPENSSL_HOME}/include)
	else (DEFINED ENV{OPENSSL_HOME})
        include_directories(${TPLS}/openssl/include)
	endif (DEFINED ENV{OPENSSL_HOME})
endif (DEFINED ENV{OPENSSL_INCLUDE})

if (DEFINED ENV{OPENSSL_LIB})
	link_directories($ENV{OPENSSL_LIB})
else (DEFINED ENV{OPENSSL_LIB})
	if (DEFINED ENV{OPENSSL_HOME})
		link_directories($ENV{OPENSSL_HOME}/lib)
	else (DEFINED ENV{OPENSSL_HOME})
		if (WIN32)
			link_directories(${TPLS}/openssl/bin.mingw64)
		endif (WIN32)
	endif (DEFINED ENV{OPENSSL_HOME})
endif (DEFINED ENV{OPENSSL_LIB})

if (DEFINED ENV{BOOST_INCLUDE})
    include_directories($ENV{BOOST_INCLUDE})
else (DEFINED ENV{BOOST_INCLUDE})
	if (DEFINED ENV{BOOST_HOME})
		include_directories($ENV{BOOST_HOME}/include)
    else (DEFINED ENV{BOOST_HOME})
        include_directories(${TPLS}/boost/include)
	endif (DEFINED ENV{BOOST_HOME})
endif (DEFINED ENV{BOOST_INCLUDE})

if (DEFINED ENV{BOOST_LIB})
	link_directories($ENV{BOOST_LIB})
else (DEFINED ENV{BOOST_LIB})
	if (DEFINED ENV{BOOST_HOME})
		link_directories($ENV{BOOST_HOME}/lib)
    else (DEFINED ENV{BOOST_HOME})
		link_directories(${TPLS}/boost/lib)
	endif (DEFINED ENV{BOOST_HOME})
endif (DEFINED ENV{BOOST_LIB})

if (DEFINED ENV{GCC_DEBUG_INFO})
	set(SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -g")
else()
    set(SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DNDEBUG")
endif (DEFINED ENV{GCC_DEBUG_INFO})

if (DEFINED USE_VALGRIND)
    set(ignoreMe "${USE_VALGRIND}")
    set (SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DBOOST_USE_VALGRIND")
endif ()

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DBOOST_LOG_DYN_LINK -DBOOST_USE_WINDOWS_H")
    set(PLATFORM_LIBS -lws2_32 -lmswsock)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DBOOST_LOG_DYN_LINK -fPIC")
    set(PLATFORM_LIBS -lrt -ldl -lpthread)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	set(SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DBOOST_LOG_DYN_LINK -fPIC")
endif ()

#libraries
set (ZLIB z)
set (BZLIB bz2)
set (OPENSSL ssl crypto)
set (BOOST_TEST_LIB boost_test_exec_monitor${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX} boost_unit_test_framework${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_LOG boost_log${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_LOG_SETUP boost_log_setup${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_THREAD boost_thread${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_SYSTEM boost_system${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_SERIALIZATION boost_serialization${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_PROGRAM_OPTIONS boost_program_options${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_FILESYSTEM boost_filesystem${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_REGEX boost_regex${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_CHRONO boost_chrono${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_LOCALE boost_locale${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_RANDOM boost_random${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_CONTEXT boost_context${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
set (BOOST_FIBERS boost_fiber${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set (BOOST_STACKTRACE boost_stacktrace_windbg${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
    set (SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DBOOST_STACKTRACE_DYN_LINK")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	set (BOOST_STACKTRACE boost_stacktrace_basic${BOOST_BUILD_INFIX}-mt${BOOST_LIB_SUFFIX})
	set (SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DBOOST_STACKTRACE_DYN_LINK")
else ()
    set (BOOST_STACKTRACE)
endif ()

#	set (WHOPR_FLAG "-flto")
set (SONIA_C_AND_CXX_COMMON "${SONIA_C_AND_CXX_COMMON} -DBOOST_THROW_EXCEPTION_CURRENT_FUNCTION=__FUNCTION__ -DBOOST_ASSERT_CURRENT_FUNCTION_NAME=__FUNCTION__ -DBOOST_ASSERT_MSG_CURRENT_FUNCTION_NAME=__FUNCTION__ -D_FILE_OFFSET_BITS=64 -O3 -finput-charset=UTF-8 ${WHOPR_FLAG} -Wno-deprecated -fdata-sections -ffunction-sections"
)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SONIA_C_AND_CXX_COMMON}")   
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SONIA_C_AND_CXX_COMMON} -std=c++17 -Wno-reorder -Wno-unused-local-typedefs")

